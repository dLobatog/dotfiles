{
  "name": "eslint-plugin-promise",
  "version": "1.0.8",
  "description": "Enforce best practices for JavaScript promises",
  "keywords": [
    "eslint",
    "eslintplugin",
    "eslint-plugin",
    "promise",
    "promises"
  ],
  "author": {
    "name": "jden",
    "email": "jason@denizac.org"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:xjamundx/eslint-plugin-promise.git"
  },
  "scripts": {
    "pretest": "standard",
    "test": "mocha test"
  },
  "devDependencies": {
    "eslint": "~1.2.0",
    "mocha": "^2.3.4",
    "standard": "^5.4.1"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "license": "ISC",
  "readme": "# eslint-plugin-promise\n\nEnforce best practices for JavaScript promises.\n\n [![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\n [![travis-ci](https://travis-ci.org/xjamundx/eslint-plugin-promise.svg)](https://travis-ci.org/xjamundx/eslint-plugin-promise)\n[![npm version](https://badge.fury.io/js/eslint-plugin-promise.svg)](https://www.npmjs.com/package/eslint-plugin-promise)\n\n## Rule\n\n### `always-catch`\n\nEnsure that each time a `then()` is applied to a promise, a\n`catch()` is applied as well.\n\n#### Valid\n\n```js\nmyPromise.then(doSomething).catch(errors);\nmyPromise.then(doSomething).then(doSomethingElse).catch(errors);\n```\n\n#### Invalid\n\n```js\nmyPromise.then(doSomething);\nmyPromise.then(doSomething, catchErrors); // catch() may be a little better\n```\n\n### `always-return`\n\nEnsure that inside a `then()` you make sure to `return` a new promise or value.\nSee http://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html (rule #5)\nfor more info on why that's a good idea.\n\n#### Valid\n\n```js\nmyPromise.then((val) => val * 2));\nmyPromise.then(function(val) { return val * 2; });\nmyPromise.then(doSomething); // could be either\n```\n\n#### Invalid\n\n```js\nmyPromise.then(function(val) {});\nmyPromise.then(() => { doSomething(); });\n```\n\n### `param-names`\n\nEnforce standard parameter names for Promise constructors\n\n#### Valid\n```js\nnew Promise(function (resolve) { ... })\nnew Promise(function (resolve, reject) { ... })\n```\n\n#### Invalid\n```js\nnew Promise(function (reject, resolve) { ... }) // incorrect order\nnew Promise(function (ok, fail) { ... }) // non-standard parameter names\n```\n\nEnsures that `new Promise()` is instantiated with the parameter names `resolve, reject` to avoid confusion with order such as `reject, resolve`. The Promise constructor uses the [RevealingConstructor pattern](https://blog.domenic.me/the-revealing-constructor-pattern/). Using the same parameter names as the language specification makes code more uniform and easier to understand.\n\n\n## Installation\n\nYou'll first need to install [ESLint](http://eslint.org):\n\n```\n$ npm i eslint --save-dev\n```\n\nNext, install `eslint-plugin-promise`:\n\n```\n$ npm install eslint-plugin-promise --save-dev\n```\n\n**Note:** If you installed ESLint globally (using the `-g` flag) then you must also install `eslint-plugin-promise` globally.\n\n## Usage\n\nAdd `promise` to the plugins section of your `.eslintrc` configuration file. You can omit the `eslint-plugin-` prefix:\n\n```json\n{\n    \"plugins\": [\n        \"promise\"\n    ]\n}\n```\n\n\nThen configure the rules you want to use under the rules section.\n\n```json\n{\n    \"rules\": {\n        \"promise/param-names\": 2,\n        \"promise/always-return\": 2,\n        \"promise/always-catch\": 2\n    }\n}\n```\n\n## Etc\n- (c) MMXV jden <jason@denizac.org> - ISC license.\n- (c) 2016 Jamund Ferguson <jamund@gmail.com> - ISC license.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/xjamundx/eslint-plugin-promise/issues"
  },
  "_id": "eslint-plugin-promise@1.0.8",
  "dist": {
    "shasum": "2e4af25c29389fb51bd5866fa0dd1680f17a2b65"
  },
  "_from": "eslint-plugin-promise@^1.0.8",
  "_resolved": "https://registry.npmjs.org/eslint-plugin-promise/-/eslint-plugin-promise-1.0.8.tgz"
}
